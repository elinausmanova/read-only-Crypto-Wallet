import { keccak256 } from '@ethersproject/keccak256';
import { createSignerInfo, createAuthInfo, createBody, createBodyWithMultipleMessages, createFee, createSigDoc, SIGN_DIRECT, } from '@evmos/proto';
import { TestingClient } from './utils';
class ProtobufTestingClient extends TestingClient {
    constructor() {
        super(...arguments);
        this.createTxBody = (payload) => {
            const { memo } = this;
            if (Array.isArray(payload)) {
                return createBodyWithMultipleMessages(payload, memo);
            }
            return createBody(payload, memo);
        };
        this.createSignDoc = (body) => {
            const { context, authInfo } = this;
            const bodyBytes = body.toBinary();
            const authInfoBytes = authInfo.toBinary();
            const chainId = context.chain.cosmosChainId;
            const { accountNumber } = context.sender;
            return createSigDoc(bodyBytes, authInfoBytes, chainId, accountNumber);
        };
        this.getSignBytes = (signDoc) => {
            const hashedSignDocHex = keccak256(signDoc.toBinary());
            const hashedSignDocBytes = Buffer.from(hashedSignDocHex.replace('0x', ''), 'hex');
            const hashedSignDocBase64 = hashedSignDocBytes.toString('base64');
            return hashedSignDocBase64;
        };
    }
    get signerInfo() {
        const { context } = this;
        const { sender } = context;
        const { sequence, pubkey } = sender;
        const pubkeyBytes = Buffer.from(pubkey, 'base64');
        const mode = SIGN_DIRECT;
        return createSignerInfo('ethsecp256', pubkeyBytes, sequence, mode);
    }
    get protoFee() {
        const { context } = this;
        const { fee } = context;
        const { amount, denom } = fee;
        const gasAsInt = parseInt(fee.gas, 10);
        return createFee(amount, denom, gasAsInt);
    }
    get authInfo() {
        const { signerInfo, protoFee } = this;
        return createAuthInfo(signerInfo, protoFee);
    }
}
const client = new ProtobufTestingClient();
export default client;
//# sourceMappingURL=proto.js.map