import { createTxRaw } from '@evmos/proto';
import { eip712Digest } from './eip712';
import { wallet } from './params';
import { hexToBytes, base64ToBytes } from './common';
const signDigest32 = (digest) => {
    const signature = wallet._signingKey().signDigest(digest);
    return Buffer.concat([hexToBytes(signature.r), hexToBytes(signature.s)]);
};
const signedPayload = (tx, signature) => {
    const bodyBytes = tx.signDirect.body.toBinary();
    const authInfoBytes = tx.signDirect.authInfo.toBinary();
    return createTxRaw(bodyBytes, authInfoBytes, [signature]);
};
export const signDirect = (tx) => {
    const digest = base64ToBytes(tx.signDirect.signBytes);
    const signature = signDigest32(digest);
    return signedPayload(tx, signature);
};
export const signEIP712 = (tx) => {
    const digest = eip712Digest(tx.eipToSign);
    const signature = signDigest32(digest);
    return signedPayload(tx, signature);
};
//# sourceMappingURL=sign.js.map