var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { generateEndpointBroadcast, generatePostBodyBroadcast, } from '@evmos/provider';
import fetch from 'node-fetch';
import { nodeUrl } from './params';
export const broadcastTx = (signedTx) => __awaiter(void 0, void 0, void 0, function* () {
    const postOptions = {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: generatePostBodyBroadcast(signedTx),
    };
    const broadcastEndpoint = `${nodeUrl}${generateEndpointBroadcast()}`;
    const broadcastResult = yield fetch(broadcastEndpoint, postOptions);
    const response = yield broadcastResult.json();
    return response;
});
//# sourceMappingURL=broadcast.js.map