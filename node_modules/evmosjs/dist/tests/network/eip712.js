import { _TypedDataEncoder as TypedDataEncoder } from '@ethersproject/hash';
import { keccak256 } from '@ethersproject/keccak256';
import { hexToBytes } from './common';
const hashDomain = (payload) => TypedDataEncoder.hashStruct('EIP712Domain', { EIP712Domain: payload.types.EIP712Domain }, payload.domain);
const hashMessage = (payload) => TypedDataEncoder.from((() => {
    const types = Object.assign({}, payload.types);
    delete types.EIP712Domain;
    const primary = types[payload.primaryType];
    if (!primary) {
        throw new Error(`No matched primary type: ${payload.primaryType}`);
    }
    delete types[payload.primaryType];
    return Object.assign({ [payload.primaryType]: primary }, types);
})()).hash(payload.message);
export const eip712Digest = (payload) => {
    const typedPayload = payload;
    const raw = Buffer.concat([
        Buffer.from('19', 'hex'),
        Buffer.from('01', 'hex'),
        hexToBytes(hashDomain(typedPayload)),
        hexToBytes(hashMessage(typedPayload)),
    ]);
    const hashAsHex = keccak256(raw);
    return hexToBytes(hashAsHex);
};
//# sourceMappingURL=eip712.js.map