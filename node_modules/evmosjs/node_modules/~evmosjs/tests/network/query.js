var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { generateEndpointAccount, generateEndpointGetValidators, generateEndpointProposals, generateEndpointBalanceByDenom, } from '@evmos/provider';
import fetch from 'node-fetch';
import { senderAddress, nodeUrl } from './params';
const restOptions = {
    method: 'GET',
    headers: { 'Content-Type': 'application/json' },
};
export const fetchSenderInfo = () => __awaiter(void 0, void 0, void 0, function* () {
    const address = senderAddress;
    const queryEndpoint = `${nodeUrl}${generateEndpointAccount(address)}`;
    const rawResult = yield fetch(queryEndpoint, restOptions);
    const result = (yield rawResult.json());
    return result;
});
export const fetchProposals = () => __awaiter(void 0, void 0, void 0, function* () {
    const queryEndpoint = `${nodeUrl}${generateEndpointProposals()}`;
    const rawResult = yield fetch(queryEndpoint, restOptions);
    const result = (yield rawResult.json());
    return result;
});
export const fetchValidators = () => __awaiter(void 0, void 0, void 0, function* () {
    const queryEndpoint = `${nodeUrl}${generateEndpointGetValidators()}`;
    const rawResult = yield fetch(queryEndpoint, restOptions);
    const result = (yield rawResult.json());
    return result;
});
export const fetchBalanceByDenom = (address, denom) => __awaiter(void 0, void 0, void 0, function* () {
    const queryEndpoint = `${nodeUrl}${generateEndpointBalanceByDenom(address, denom)}`;
    const rawResult = yield fetch(queryEndpoint, restOptions);
    const result = (yield rawResult.json());
    return result;
});
export const fetchERC20ContractAddress = () => __awaiter(void 0, void 0, void 0, function* () {
    const queryEndpoint = `${nodeUrl}/evmos/erc20/v1/token_pairs`;
    const rawResult = yield fetch(queryEndpoint, restOptions);
    const result = (yield rawResult.json());
    return result;
});
//# sourceMappingURL=query.js.map