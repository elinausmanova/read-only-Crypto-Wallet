var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { expectSuccess, delay } from '../../common';
import { NetworkClientHost } from '../types';
import SubmitProposalClient from './submitProposal';
import DelegateClient from './delegate';
import VoteClient from './vote';
import ConvertCoinClient from './convertCoin';
class ConvertCoinIntegrationClient extends NetworkClientHost {
    constructor() {
        super(...arguments);
        this.testIntegration = () => __awaiter(this, void 0, void 0, function* () {
            const { networkClient } = this;
            const proposalClient = new SubmitProposalClient(networkClient);
            const delegateClient = new DelegateClient(networkClient);
            const voteClient = new VoteClient(networkClient);
            const convertCoinClient = new ConvertCoinClient(networkClient);
            let response = yield proposalClient.sendTx();
            expectSuccess(response);
            response = yield delegateClient.sendTx();
            expectSuccess(response);
            const proposalId = proposalClient.getProposalId();
            voteClient.setProposalId(proposalId);
            response = yield voteClient.sendTx();
            expectSuccess(response);
            yield delay(10000);
            response = yield convertCoinClient.sendTx();
            expectSuccess(response);
            yield delay(21000);
            yield proposalClient.verifyStateChange();
            yield delegateClient.verifyStateChange();
            yield voteClient.verifyStateChange();
            yield convertCoinClient.verifyStateChange();
        });
    }
}
export default ConvertCoinIntegrationClient;
//# sourceMappingURL=main.js.map