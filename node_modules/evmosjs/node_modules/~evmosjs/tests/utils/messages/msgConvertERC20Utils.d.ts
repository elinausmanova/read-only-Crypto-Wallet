import { TestingClient } from '../utils';
declare class MsgConvertERC20TestingClient extends TestingClient {
    get params(): {
        contractAddress: string;
        amount: string;
        receiverBech32: string;
        senderHex: string;
    };
    get protoMsg(): {
        message: import("@buf/evmos_evmos.bufbuild_es/evmos/erc20/v1/tx_pb").MsgConvertERC20;
        path: string;
    };
    get eip712TypedData(): {
        types: {
            MsgValue: {
                name: string;
                type: string;
            }[];
        };
        message: {
            type: string;
            value: {
                contract_address: string;
                amount: string;
                receiver: string;
                sender: string;
            };
        };
    };
    get payload(): {
        protoMsg: {
            message: import("@buf/evmos_evmos.bufbuild_es/evmos/erc20/v1/tx_pb").MsgConvertERC20;
            path: string;
        };
        eip712TypedData: {
            types: {
                MsgValue: {
                    name: string;
                    type: string;
                }[];
            };
            message: {
                type: string;
                value: {
                    contract_address: string;
                    amount: string;
                    receiver: string;
                    sender: string;
                };
            };
        };
        tx: import("@evmos/transactions").TxPayload;
    };
}
declare const client: MsgConvertERC20TestingClient;
export default client;
//# sourceMappingURL=msgConvertERC20Utils.d.ts.map