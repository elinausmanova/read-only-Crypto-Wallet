// @generated by protoc-gen-es v1.0.0 with parameter "rewrite_imports=./google/api/**/*_pb.js:@buf/googleapis_googleapis.bufbuild_es,rewrite_imports=./gogoproto/**/*_pb.js:@buf/cosmos_gogo-proto.bufbuild_es,rewrite_imports=./cosmos_proto/**/*_pb.js:@buf/cosmos_cosmos-proto.bufbuild_es"
// @generated from file cosmos/store/streaming/abci/grpc.proto (package cosmos.store.streaming.abci, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { RequestBeginBlock, RequestDeliverTx, RequestEndBlock, ResponseBeginBlock, ResponseCommit, ResponseDeliverTx, ResponseEndBlock } from "../../../../tendermint/abci/types_pb.js";
import type { StoreKVPair } from "../../v1beta1/listening_pb.js";

/**
 * ListenBeginBlockRequest is the request type for the ListenBeginBlock RPC method
 *
 * @generated from message cosmos.store.streaming.abci.ListenBeginBlockRequest
 */
export declare class ListenBeginBlockRequest extends Message<ListenBeginBlockRequest> {
  /**
   * @generated from field: tendermint.abci.RequestBeginBlock req = 1;
   */
  req?: RequestBeginBlock;

  /**
   * @generated from field: tendermint.abci.ResponseBeginBlock res = 2;
   */
  res?: ResponseBeginBlock;

  constructor(data?: PartialMessage<ListenBeginBlockRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "cosmos.store.streaming.abci.ListenBeginBlockRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListenBeginBlockRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListenBeginBlockRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListenBeginBlockRequest;

  static equals(a: ListenBeginBlockRequest | PlainMessage<ListenBeginBlockRequest> | undefined, b: ListenBeginBlockRequest | PlainMessage<ListenBeginBlockRequest> | undefined): boolean;
}

/**
 * ListenBeginBlockResponse is the response type for the ListenBeginBlock RPC method
 *
 * @generated from message cosmos.store.streaming.abci.ListenBeginBlockResponse
 */
export declare class ListenBeginBlockResponse extends Message<ListenBeginBlockResponse> {
  constructor(data?: PartialMessage<ListenBeginBlockResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "cosmos.store.streaming.abci.ListenBeginBlockResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListenBeginBlockResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListenBeginBlockResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListenBeginBlockResponse;

  static equals(a: ListenBeginBlockResponse | PlainMessage<ListenBeginBlockResponse> | undefined, b: ListenBeginBlockResponse | PlainMessage<ListenBeginBlockResponse> | undefined): boolean;
}

/**
 * ListenEndBlockRequest is the request type for the ListenEndBlock RPC method
 *
 * @generated from message cosmos.store.streaming.abci.ListenEndBlockRequest
 */
export declare class ListenEndBlockRequest extends Message<ListenEndBlockRequest> {
  /**
   * @generated from field: tendermint.abci.RequestEndBlock req = 1;
   */
  req?: RequestEndBlock;

  /**
   * @generated from field: tendermint.abci.ResponseEndBlock res = 2;
   */
  res?: ResponseEndBlock;

  constructor(data?: PartialMessage<ListenEndBlockRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "cosmos.store.streaming.abci.ListenEndBlockRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListenEndBlockRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListenEndBlockRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListenEndBlockRequest;

  static equals(a: ListenEndBlockRequest | PlainMessage<ListenEndBlockRequest> | undefined, b: ListenEndBlockRequest | PlainMessage<ListenEndBlockRequest> | undefined): boolean;
}

/**
 * ListenEndBlockResponse is the response type for the ListenEndBlock RPC method
 *
 * @generated from message cosmos.store.streaming.abci.ListenEndBlockResponse
 */
export declare class ListenEndBlockResponse extends Message<ListenEndBlockResponse> {
  constructor(data?: PartialMessage<ListenEndBlockResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "cosmos.store.streaming.abci.ListenEndBlockResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListenEndBlockResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListenEndBlockResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListenEndBlockResponse;

  static equals(a: ListenEndBlockResponse | PlainMessage<ListenEndBlockResponse> | undefined, b: ListenEndBlockResponse | PlainMessage<ListenEndBlockResponse> | undefined): boolean;
}

/**
 * ListenDeliverTxRequest is the request type for the ListenDeliverTx RPC method
 *
 * @generated from message cosmos.store.streaming.abci.ListenDeliverTxRequest
 */
export declare class ListenDeliverTxRequest extends Message<ListenDeliverTxRequest> {
  /**
   * explicitly pass in block height as neither RequestDeliverTx or ResponseDeliverTx contain it
   *
   * @generated from field: int64 block_height = 1;
   */
  blockHeight: bigint;

  /**
   * @generated from field: tendermint.abci.RequestDeliverTx req = 2;
   */
  req?: RequestDeliverTx;

  /**
   * @generated from field: tendermint.abci.ResponseDeliverTx res = 3;
   */
  res?: ResponseDeliverTx;

  constructor(data?: PartialMessage<ListenDeliverTxRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "cosmos.store.streaming.abci.ListenDeliverTxRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListenDeliverTxRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListenDeliverTxRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListenDeliverTxRequest;

  static equals(a: ListenDeliverTxRequest | PlainMessage<ListenDeliverTxRequest> | undefined, b: ListenDeliverTxRequest | PlainMessage<ListenDeliverTxRequest> | undefined): boolean;
}

/**
 * ListenDeliverTxResponse is the response type for the ListenDeliverTx RPC method
 *
 * @generated from message cosmos.store.streaming.abci.ListenDeliverTxResponse
 */
export declare class ListenDeliverTxResponse extends Message<ListenDeliverTxResponse> {
  constructor(data?: PartialMessage<ListenDeliverTxResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "cosmos.store.streaming.abci.ListenDeliverTxResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListenDeliverTxResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListenDeliverTxResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListenDeliverTxResponse;

  static equals(a: ListenDeliverTxResponse | PlainMessage<ListenDeliverTxResponse> | undefined, b: ListenDeliverTxResponse | PlainMessage<ListenDeliverTxResponse> | undefined): boolean;
}

/**
 * ListenCommitRequest is the request type for the ListenCommit RPC method
 *
 * @generated from message cosmos.store.streaming.abci.ListenCommitRequest
 */
export declare class ListenCommitRequest extends Message<ListenCommitRequest> {
  /**
   * explicitly pass in block height as ResponseCommit does not contain this info
   *
   * @generated from field: int64 block_height = 1;
   */
  blockHeight: bigint;

  /**
   * @generated from field: tendermint.abci.ResponseCommit res = 2;
   */
  res?: ResponseCommit;

  /**
   * @generated from field: repeated cosmos.store.v1beta1.StoreKVPair change_set = 3;
   */
  changeSet: StoreKVPair[];

  constructor(data?: PartialMessage<ListenCommitRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "cosmos.store.streaming.abci.ListenCommitRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListenCommitRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListenCommitRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListenCommitRequest;

  static equals(a: ListenCommitRequest | PlainMessage<ListenCommitRequest> | undefined, b: ListenCommitRequest | PlainMessage<ListenCommitRequest> | undefined): boolean;
}

/**
 * ListenCommitResponse is the response type for the ListenCommit RPC method
 *
 * @generated from message cosmos.store.streaming.abci.ListenCommitResponse
 */
export declare class ListenCommitResponse extends Message<ListenCommitResponse> {
  constructor(data?: PartialMessage<ListenCommitResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "cosmos.store.streaming.abci.ListenCommitResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListenCommitResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListenCommitResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListenCommitResponse;

  static equals(a: ListenCommitResponse | PlainMessage<ListenCommitResponse> | undefined, b: ListenCommitResponse | PlainMessage<ListenCommitResponse> | undefined): boolean;
}

